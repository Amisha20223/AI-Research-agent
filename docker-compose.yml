version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: research_agent_db
    environment:
      POSTGRES_DB: research_agent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - research_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: research_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - research_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: research_agent_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/research_agent
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NEWS_API_KEY=${NEWS_API_KEY:-}
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - research_network
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: research_agent_celery_worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/research_agent
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NEWS_API_KEY=${NEWS_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - research_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery-beat
    container_name: research_agent_celery_beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/research_agent
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - research_network
    restart: unless-stopped

  # Next.js Frontend (optional for local development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: research_agent_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - research_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  research_network:
    driver: bridge
